import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv
from handlers import match_handlers
from keyboards import main_menu
from utils.reminders_db import get_all_reminders, delete_reminder
from datetime import datetime, timedelta

load_dotenv()

API_TOKEN = os.getenv("TOKEN")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –º–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10, –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å 1)
REMINDER_MINUTES = int(os.getenv("TEST_REMINDER_MINUTES", 10))


async def reminder_worker(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    –µ—Å–ª–∏ –¥–æ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–ª–æ—Å—å <= REMINDER_MINUTES.
    –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ë–î.
    """
    while True:
        now = datetime.now()
        reminders = get_all_reminders()
        for reminder in reminders:
            reminder_id, user_id, match_id, match_time = reminder
            try:
                match_dt = datetime.strptime(match_time.split('(')[0].strip(), '%d %B %Y, %H:%M')
            except Exception:
                try:
                    match_dt = datetime.strptime(match_time.split('(')[0].strip(), '%d.%m.%Y, %H:%M')
                except Exception:
                    continue
            delta = (match_dt - now).total_seconds() / 60
            if 0 <= delta <= REMINDER_MINUTES:
                try:
                    await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ú–∞—Ç—á ‚Ññ{match_id} –Ω–∞—á–Ω—ë—Ç—Å—è –≤ {match_time}")
                except Exception:
                    pass
                delete_reminder(reminder_id)
        await asyncio.sleep(60)


async def main():
    if not API_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∫–∞–∫ TOKEN=...")
        return

    bot = Bot(token=API_TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(match_handlers.router)

    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def start_cmd(message: Message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π The International 2025.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞:",
            reply_markup=main_menu()
        )

    print("‚úÖ Bot is online!")
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(reminder_worker(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
