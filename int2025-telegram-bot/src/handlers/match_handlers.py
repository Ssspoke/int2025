from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from services.liquipedia_parser import LiquipediaParser

router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π The International 2025.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /matches, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–∞—Ö."
    )

MAX_MESSAGE_LENGTH = 4096

def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]

@router.message(Command("matches"))
async def matches_command(message: Message):
    parser = LiquipediaParser()
    matches = parser.fetch_matches()
    if not matches:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π The International 2025:</b>\n\n"
    for match in matches:
        text += (
            f"üéØ <b>{match['stage']}</b>\n"
            f"üîπ {match['team1']} vs {match['team2']}\n"
            f"üïí {match['time']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {match['status']}\n\n"
        )

    for part in split_message(text):
        await message.answer(part, parse_mode="HTML")
