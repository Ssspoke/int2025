from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from services.liquipedia_parser import LiquipediaParser
from keyboards import matches_keyboard

router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π The International 2025.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /matches, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–∞—Ö."
    )

MAX_MESSAGE_LENGTH = 4096

def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    return [text[i:i+max_length] for i in range(0, len(text), max_length)]




@router.message(Command("matches"))
@router.message(F.text == "üìÖ –ú–∞—Ç—á–∏ TI2025")  # —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –∏–∑ –º–µ–Ω—é
async def matches_command(message: Message):
    parser = LiquipediaParser()
    matches = parser.fetch_matches(limit=5)
    if not matches:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = "üéØ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏ The International 2025:</b>\n\n"
    for i, match in enumerate(matches, start=1):
        text += (
            f"{i}. <b>{match['team1']} vs {match['team2']}</b>\n"
            f" üïí{match['time']}\n"
            f" üìå{match['stage']}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {match['status']}\n\n"
        )

    await message.answer(text, parse_mode="HTML", reply_markup=matches_keyboard(matches))


@router.callback_query(F.data.startswith("notify_"))
async def notify_match(callback: CallbackQuery):
    match_id = callback.data.split("_")[1]
    # TODO: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await callback.answer(f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ –º–∞—Ç—á ‚Ññ{match_id}!")
